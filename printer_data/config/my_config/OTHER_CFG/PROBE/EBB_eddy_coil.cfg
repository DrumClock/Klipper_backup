# Still accurate as of 02 July 2024.
# Change to BTT klipper by entering the following via SSH

# cd ~/klipper
# git remote add eddy https://github.com/bigtreetech/klipper
# git fetch eddy
# git checkout eddy/eddy


###############################################
# BIGTRRETECH Eddy V1.0 - Leveling probe 
# info: https://github.com/bigtreetech/Eddy
###############################################

#----------- This section is only relevant for Eddy USB -------------------------

#[mcu eddy]
#serial: /dev/serial/by-id/usb-Klipper_rp2040_eddy-if00 
#restart_method: command

#[temperature_sensor btt_eddy_mcu]
#sensor_type: temperature_mcu 
#sensor_mcu: eddy  
#min_temp: 10 
#max_temp: 100 

#[temperature_probe btt_eddy]
#sensor_type: Generic 3950
#sensor_pin: eddy:gpio26
#horizontal_move_z: 2

#---------------------------------------------------------------------------------
[probe_eddy_current btt_eddy]
sensor_type: ldc1612
i2c_mcu: EBB_42  
i2c_bus: i2c3_PB3_PB4  
x_offset: 0
y_offset: -22
z_offset: 1
data_rate: 500

# after calibrate SAVE CONFIG  AL 3mm
reg_drive_current = 15
calibrate =
 	0.050000:3258755.259,0.100000:3258242.936,0.150000:3257776.929,
 	0.200000:3257286.961,0.250000:3256807.627,0.300000:3256356.529,
 	0.350000:3255914.965,0.400000:3255496.741,0.450000:3255047.696,
 	0.500000:3254625.240,0.550000:3254255.703,0.600000:3253854.589,
 	0.650000:3253445.885,0.700000:3253076.387,0.750000:3252680.666,
 	0.800000:3252361.207,0.850000:3251986.801,0.900000:3251621.800,
 	0.950000:3251326.102,1.000000:3251002.211,1.050000:3250652.360,
 	1.100000:3250324.118,1.150000:3250017.944,1.200000:3249733.976,
 	1.250000:3249445.300,1.300000:3249143.776,1.350000:3248872.147,
 	1.400000:3248595.513,1.450000:3248306.711,1.500000:3248047.168,
 	1.550000:3247805.422,1.600000:3247564.948,1.650000:3247303.196,
 	1.700000:3247088.322,1.750000:3246830.483,1.800000:3246599.935,
 	1.850000:3246373.131,1.900000:3246145.911,1.950000:3245944.568,
 	2.000000:3245684.398,2.050000:3245479.364,2.100000:3245244.645,
 	2.150000:3245071.429,2.200000:3244878.722,2.250000:3244671.922,
 	2.300000:3244506.809,2.350000:3244321.576,2.400000:3244167.312,
 	2.450000:3243974.873,2.500000:3243755.585,2.550000:3243590.602,
 	2.600000:3243422.164,2.650000:3243281.010,2.700000:3243119.582,
 	2.750000:3242910.140,2.800000:3242774.772,2.850000:3242607.683,
 	2.900000:3242474.732,2.950000:3242362.064,3.000000:3242179.854,
 	3.050000:3242047.902,3.100000:3241881.492,3.150000:3241767.230,
 	3.200000:3241628.838,3.250000:3241508.139,3.300000:3241366.215,
 	3.350000:3241230.749,3.400000:3241110.296,3.450000:3240980.293,
 	3.500000:3240856.270,3.550000:3240755.715,3.600000:3240610.881,
 	3.650000:3240532.361,3.700000:3240397.144,3.750000:3240293.569,
 	3.800000:3240165.693,3.850000:3240043.778,3.900000:3239953.841,
 	3.950000:3239856.140,4.000000:3239761.950,4.050000:3239643.460
calibration_temp = 0.000000


[bed_mesh]
speed: 120
horizontal_move_z: 1
mesh_min: 20,20   #20,70  #20,20
mesh_max: 260,280 #250,250 #260,280
algorithm: bicubic
probe_count: 10
scan_overshoot: 8
fade_start: 1.0
fade_end: 5.0

####################################################################

[gcode_macro TEST_SCAN_MODE_RAPID]
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %}
 
   {% if printer['virtual_sdcard'].is_active != true %}   
   ### Only if it doesn't print!

    
     {% set name = "heightmap" %}    # name variable
     {% set init = user_vars[name] %}     # default preset 
     {% set index = user_vars[name].index %}
     
    ##  Bed Mesh Rapid Scan - Eddy probe
    
       {% if 'probe_eddy_current' in printer['probe'].name %}
         {% if "xy" not in printer.toolhead.homed_axes %}  G28  {% endif %}   

         M190 S40 # start temp BED
         
         SAVE_GCODE_STATE NAME=rapid        
         BED_MESH_CALIBRATE METHOD=scan SCAN_MODE=rapid  PROFILE={index}  
         RESTORE_GCODE_STATE NAME=rapid MOVE=1 MOVE_SPEED=200
         
         _GET_MESH_INFO         
         
       {% endif %}
    {% endif %}

#----------------------------------------------

[gcode_macro VARIABLE]
gcode:

variable_heightmap: { 'index': 0 }  # 'index': 0

#----------------------------------------------

[gcode_macro _GET_MESH_INFO]
gcode: 

     {% set user_vars = printer["gcode_macro VARIABLE"] %}
     {% set name = "heightmap" %}    # name variable
     {% set init = user_vars[name] %}     # default preset      
     {% set index = (user_vars[name].index)|int %}
     
     {% set mesh = {'points':[ ]} %}
     {% set points = (printer.configfile.save_config_pending_items[("bed_mesh %s" % index)]['points'])|replace("\n", ",") %}
      
        #{action_respond_info("points : %s" % points )}
 
      {% for count in points.split(",") %} 
        {% if count != "" %}
          {% set _dummy = mesh.points.append( count|float) %}
        {% endif %}
      {% endfor %}   

        # {action_respond_info("mesh = %s" % mesh )}

      {% set bed_temp =(printer['heater_bed'].temperature)|round(2) %}
      {% set bed_min = (mesh.points|min)|round(3) %}     
      {% set bed_max = (mesh.points|max)|round(3) %}  
      {% set bed_range = (bed_max - bed_min)|round(3) %}  
      
         {action_respond_info("temp = %s range= %s min= %s max= %s points= %s " % (  bed_temp, bed_range, bed_min, bed_max, mesh.points|length))}


     {% set _dummy = init.update({'index': index  }) %}      
     {% set _dummy = init.update({ index : {'temp':bed_temp, 'range':bed_range, 'min':bed_min , 'max':bed_max, 'points':mesh.points|length } }) %}      
     
     ### save variable 
      SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"  
    
     ### repeated measurements with increasing temperature
     {% if index < 4 %}        
        UPDATE_DELAYED_GCODE ID=_MEASURING_REPEAT DURATION=3
     {% else %}
        M140 S0
     {% endif %}

#----------------------------------------------

[delayed_gcode _MEASURING_REPEAT]
gcode: 

     {% set user_vars = printer["gcode_macro VARIABLE"] %}  
     {% set name = "heightmap" %}    # name variable
     {% set init = user_vars[name] %}     # default preset 
     {% set index = (user_vars[name].index) + 1 %}

      ### save variable 
      {% set _dummy = init.update({'index': index  }) %}  
        SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"  
     
     {% set bed_temp =(printer['heater_bed'].temperature)|round(2) %}    
     {% set temp = [40,50,60,70,80] %}
     
      M190 S{temp[index]}  
      G4 P300000  ; wait in miliseconds (5 min)
      
      SAVE_GCODE_STATE NAME=rapid 
      BED_MESH_CALIBRATE METHOD=scan SCAN_MODE=rapid PROFILE={user_vars.heightmap.index} 
      _GET_MESH_INFO         
      GET_USER_VARIABLE VAR=heightmap
      RESTORE_GCODE_STATE NAME=rapid MOVE=1 MOVE_SPEED=200
      